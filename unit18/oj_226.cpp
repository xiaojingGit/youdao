// 226
// 在边长为9的正方形培养皿中，正中心位置有m个细菌。假设细菌的寿命仅一天，但每天可繁殖10个后代，而且这10个后代，
// 有两个分布在原来的单元格中，其余的均匀分布在其四周相邻的八个单元格中。求经过n(1≤n≤4)天后，细菌在培养皿中的分布情况。

// 输入格式
// 输入为两个整数，第一个整数m表示中心位置细菌的个数（2 ≤ m ≤ 30），第二个整数n表示经过的天数（1 ≤ n ≤ 4）。
// 输入样例
// 2 1

// 输出格式
// 输出九行九列整数矩阵，每行的整数之间用空格分隔。整个矩阵代表n天后细菌在培养皿上的分布情况。
// 输出样例
// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 0 2 2 2 0 0 0
// 0 0 0 2 4 2 0 0 0
// 0 0 0 2 2 2 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0

#include<stdio.h>
int main()
{
	int c[9][9], d[9][9];//旧的培养基和新的培养基，用于递推
	int m, n;//初始中央细菌数以及递推的天数
	scanf("%d%d", &m, &n);
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			d[i][j] = 0;//变量的初始化
		}
	}
	d[4][4] = m;//中央细菌已经长出
	for (int k = 1; k <= n; k++) {//开始递推
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				c[i][j] = d[i][j];//旧培养基相当于一个储存容器，储存上一天的培养基情况
				d[i][j] = 2 * d[i][j];//每个位置上的每个旧细菌生两个崽，然后凋亡
			}
		}
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				if (c[i][j] != 0) {//如果旧培养基上某个位置有细菌，就在新培养基上它的周围生出一圈崽儿（记得每个细菌各生一圈儿……）
					d[i - 1][j - 1] = d[i - 1][j - 1] + c[i][j];
					d[i - 1][j] = d[i - 1][j] + c[i][j];
					d[i - 1][j + 1] = d[i - 1][j + 1] + c[i][j];
					d[i][j - 1] = d[i][j - 1] + c[i][j];
					d[i][j + 1] = d[i][j + 1] + c[i][j];
					d[i + 1][j - 1] = d[i + 1][j - 1] + c[i][j];
					d[i + 1][j] = d[i + 1][j] + c[i][j];
					d[i + 1][j + 1] = d[i + 1][j + 1] + c[i][j];
				}
			}
		}
	}
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++)
			printf("%d ", d[i][j]);
		printf("\n");
	}
	return 0;
}

// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 2 2 2 0 0 0 0
// 0 0 2 2 4 2 0 0 0
// 0 0 2 4 6 2 0 0 0
// 0 0 0 2 2 2 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0 0